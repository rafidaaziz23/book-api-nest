// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password  String
  role      Role    @relation(fields: [roleId], references: [id])
  roleId    Int
  comments  Comment[]
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  books     Book[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Book {
  id            Int      @id @default(autoincrement())
  title         String
  author        User     @relation(fields: [authorId], references: [id])
  authorId      Int
  coverUrl      String
  genre         Genre    @relation(fields: [genreId], references: [id])
  genreId       Int
  publishedYear Int
  chapters      Chapter[]
  comments      Comment[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Chapter {
  id        Int      @id @default(autoincrement())
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  title     String
  content   String
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  book      Book     @relation(fields: [bookId], references: [id])
  bookId    Int
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId Int?
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

